#!/usr/bin/env python
import copy
import json
from argparse import ArgumentParser
from tqdm import tqdm
from tabulate import tabulate
from errors.error_logger import ErrorLogger
from wikisql.lib.dbengine import DBEngine
from wikisql.lib.query import Query
from wikisql.lib.common import count_lines

import os

# Jan1 2019. Wonseok. Path info has added to original wikisql/evaluation.py
# Only need to add "query" (essentially "sql" in original data) and "table_id" while constructing file.

def oprint(*args, **kwargs):
    #print(*args, **kwargs)
    pass

leeway = 0
if __name__ == '__main__':

    # Hyper parameters
    mode = 'dev'
    ordered = False

    dset_name = 'wikisql_tok'
    saved_epoch = 'best'  # 30-162
    key_data = '/simple_ann400/'
    key_results = '/search_simple_400/'
    # Set path
    path_h = './' # change to your home folder
    # path_wikisql_tok = os.path.join(path_h, 'data', 'wikisql_tok')
    path_save_analysis = './results' +  key_results

    # Path for evaluation results.
    path_wikisql0 = os.path.join(path_h,'data/WikiSQL-1.1' + key_data)
    path_source = os.path.join(path_wikisql0, f'{mode}.jsonl')
    path_db = os.path.join(path_wikisql0, f'{mode}.db')
    print(path_db)
    print(os.getcwd())
    path_pred = os.path.join(path_save_analysis, f'results_{mode}.jsonl')


    # For the case when use "argument"
    parser = ArgumentParser()
    parser.add_argument('--source_file', help='source file for the prediction', default=path_source)
    parser.add_argument('--db_file', help='source database for the prediction', default=path_db)
    parser.add_argument('--pred_file', help='predictions by the model', default=path_pred)
    parser.add_argument('--ordered', action='store_true', help='whether the exact match should consider the order of conditions')
    args = parser.parse_args()
    args.ordered=ordered

    all_meta = {}
    fm = open(path_wikisql0 + "/" + mode+".tables.jsonl")
    for line in fm:
        meta = json.loads(line)
        all_meta[meta["id"]] = meta
    fm.close()


    engine = DBEngine(args.db_file)
    exact_match = []


    error_loger = ErrorLogger()
    agg_map = {x : {y: 0 for y in Query.agg_ops} for x in Query.agg_ops}
    selwhere = 0

    out_file_new = open("wikisql/test_results_searchqdummyl.jsonl", "w")
    dummy = {"query": {"agg": 0, "sel": 0, "conds": []}, "table_id": "", "nlu": ""}
    wrong_indexes = set()
    # to_print = {8198, 4107, 8204, 6156, 16, 2065, 8211, 8215, 25, 6171, 8224, 8225, 2083, 6179, 6181, 8231, 4136, 4138, 6186, 4144, 50, 6194, 6195, 53, 4150, 56, 8258, 4169, 2122, 75, 83, 2139, 8286, 8287, 96, 8289, 2146, 4194, 100, 101, 4195, 4212, 124, 8316, 8317, 8320, 8326, 8327, 4232, 8329, 8332, 2190, 8335, 2194, 2195, 8345, 6297, 4251, 6302, 162, 6306, 8359, 8366, 4271, 4275, 8373, 4278, 4283, 4284, 2245, 2247, 2249, 4298, 8395, 8396, 8399, 4307, 215, 8408, 8411, 8414, 4322, 6371, 6379, 4333, 8189, 2302, 259, 2317, 6413, 275, 282, 283, 2332, 2369, 4419, 6473, 6490, 353, 4454, 2412, 4470, 377, 2438, 4486, 394, 416, 2464, 427, 428, 4525, 2492, 6596, 456, 4556, 6607, 474, 477, 6628, 6629, 6638, 2550, 2551, 510, 515, 4611, 2566, 2568, 533, 6683, 542, 6691, 6692, 555, 2604, 4653, 6708, 6711, 4666, 2619, 6718, 6720, 6722, 6729, 6746, 4700, 2656, 2657, 4704, 2659, 6771, 6780, 4735, 6797, 6802, 2708, 6804, 6810, 6817, 6825, 6836, 6837, 697, 2751, 6857, 6859, 6873, 4828, 4832, 6890, 6893, 2802, 6898, 2808, 770, 6915, 772, 779, 6927, 4881, 6932, 2839, 796, 801, 6947, 2857, 6967, 826, 2874, 834, 6980, 6981, 6995, 6996, 4949, 6999, 7001, 859, 7005, 7007, 7009, 7011, 2916, 879, 7023, 7024, 7026, 7031, 4988, 2945, 904, 905, 906, 917, 7063, 5018, 7067, 924, 2973, 7070, 7080, 7092, 7093, 7100, 7104, 7106, 3017, 7114, 3019, 7125, 3035, 1001, 3054, 7150, 5105, 3058, 1012, 1016, 3066, 7168, 7172, 7174, 1032, 5131, 7179, 7183, 3090, 1043, 7186, 7189, 1052, 5151, 7201, 7204, 7210, 3115, 7212, 1070, 7214, 1073, 7220, 1080, 1087, 1089, 5193, 1101, 1102, 3150, 7266, 5221, 1131, 7275, 7290, 7295, 5250, 1161, 7307, 7309, 1166, 7312, 5266, 7315, 3224, 3225, 5273, 5274, 7331, 3236, 7334, 5290, 3247, 5295, 1204, 1205, 7349, 5304, 1209, 7356, 3264, 1217, 5314, 3267, 7360, 3269, 7362, 1230, 7374, 7382, 1245, 1247, 3297, 1251, 7401, 7412, 7415, 7421, 5375, 1281, 3329, 3331, 3335, 1290, 7438, 7439, 7440, 1300, 7453, 7455, 7461, 3368, 1321, 1324, 7468, 1329, 7473, 7475, 1334, 7478, 7480, 3387, 7499, 7504, 7505, 3412, 7512, 7514, 1377, 7533, 1394, 3455, 7553, 7555, 3462, 7558, 5522, 5527, 1434, 7579, 7589, 7591, 7595, 7601, 3512, 1473, 7617, 7630, 3536, 7633, 5591, 7640, 5597, 7645, 5606, 3559, 3561, 5622, 5626, 7676, 3582, 1536, 7682, 1539, 7684, 1562, 3617, 3618, 7717, 7719, 5672, 7726, 7733, 3639, 1594, 7738, 5695, 7744, 3650, 7747, 7749, 5707, 7769, 7777, 3684, 3692, 5741, 1647, 7792, 7794, 7795, 1652, 7798, 3703, 7801, 1662, 1667, 7812, 5766, 3719, 7815, 7816, 7817, 1680, 7824, 3732, 7831, 5791, 3746, 1701, 7850, 5804, 7853, 7854, 7864, 3778, 7875, 7876, 7877, 3782, 1746, 7892, 1749, 7896, 1761, 5859, 1772, 1774, 3823, 7926, 7927, 3833, 7934, 7941, 7944, 7947, 7960, 3866, 7982, 1840, 1843, 7987, 1846, 7993, 7994, 1852, 7998, 8006, 8011, 1869, 8014, 8015, 8021, 1890, 8038, 8041, 3949, 5997, 8046, 3958, 6011, 6019, 8068, 1925, 6025, 6028, 8078, 8079, 6033, 3993, 8092, 8093, 1952, 4004, 4018, 4019, 6073, 4027, 8124, 8126, 8130, 1987, 1988, 8132, 1990, 8135, 4040, 1993, 4042, 4043, 4044, 6091, 8136, 6100, 8151, 8153, 8161, 2021, 6118, 8174, 2038, 4086, 4089, 8188, 6141}
    to_print = {}
    with open(args.source_file) as fs, open(args.pred_file) as fp:
        grades = []
        c = 0
        cc = 0
        index = 0
        #forig = open(os.path.join('./results/' +  'original_base', f'results_{mode}.jsonl'))
        for ls, lp in tqdm(zip(fs, fp), total=count_lines(args.source_file)):
            eg = json.loads(ls)
            ep = json.loads(lp)
            # In case you want to skip real or fake ones
            # if eg.get("is_real", False) == False:
            #     continue
            index += 1
            #eorig = json.loads(next(forig))
            # Skip missing entries (Faulty tokenization)
            while eg["question"] != ep["nlu"]:
                print("one skip")
                ls = next(fs)
                eg = json.loads(ls)

                # print(eg["question"])
                # print(ep["nlu"])
                # print(c)
                dummy_copy = copy.deepcopy(dummy)
                out_file_new.write(json.dumps(dummy_copy)+"\n")
                grades.append(False)
                exact_match.append(False)

                #dwdwed
            if ep.get("error", None) == "Skip happened":
                dummy_copy = copy.deepcopy(dummy)
                out_file_new.write(json.dumps(dummy_copy) + "\n")
                grades.append(False)
                exact_match.append(False)
                continue
            c += 1
            question = eg["question"]
            agg_ops = ['', 'MAX', 'MIN', 'COUNT', 'SUM', 'AVG']
            if "query" in ep and ep["query"]["agg"] in [1, 2, 4, 5] and all_meta[ep["table_id"]]["types"][ep["query"]["sel"]] == "text":
                # print(ep["query"])
                ep["query"]["agg"] = 0
            out_file_new.write(json.dumps(ep)+"\n")

            #ep["query"]["agg"] = 3 if ep["query"]["agg"] == 4 else  ep["query"]["agg"] #eg["sql"]["agg"]
            qg = Query.from_dict(eg['sql'], ordered=args.ordered)

            gold = engine.execute_query(eg['table_id'], qg, lower=True)
            pred = ep.get('error', None)
            qp = None
            if not ep.get('error', None):
                try:
                    qp = Query.from_dict(ep['query'], ordered=args.ordered)
                    pred = engine.execute_query(eg['table_id'], qp, lower=True)
                except Exception as e:
                    pred = repr(e)
            correct = pred == gold
            if all_meta[ep["table_id"]]["types"][ep["query"]["sel"]] == "real":
                agg_map[Query.agg_ops[eg["sql"]["agg"]]][Query.agg_ops[ep["query"]["agg"]]] += 1
            if True:
                wrong_indexes.add(index)
                where_cols = [x[0] for x in ep["query"]["conds"]]
                sel_col = ep["query"]["sel"]
                if sel_col in where_cols:
                    selwhere += 1
                if index in to_print :
                    # if  all_meta[eg["table_id"]]["types"][ep["query"]["sel"]] == "real" and eg["sql"]["agg"] == 3 :
                    cc += 1
                    print(eg["question"])
                    print("GOLD", Query.agg_ops[eg["sql"]["agg"]])
                    print("PRED", Query.agg_ops[ep["query"]["agg"]])
                    print("GOLD", eg["sql"])
                    print("PRED", ep["query"])
                    #print("ORIG", eorig["query"])
                    print(all_meta[eg["table_id"]]["header"])
                    print(all_meta[eg["table_id"]]["types"])
                    print(pred, gold)
                    print("table_" + eg["table_id"].replace("-", "_"))
                    print("^"*100)
                    values = engine.execute_sel_star(eg["table_id"])

                    # print(tabulate(values, headers=all_meta[eg["table_id"]]["header"], tablefmt='fancy_grid'))
                    print("*"*100)
                    pass
                #oprint("Pred" ,pred)
                #oprint("Gold", gold)
                oprint(all_meta[eg["table_id"]]["header"])
                #oprint("Pred", ep["query"])
                oprint("Gold", eg["sql"])
                oprint(eg["table_id"])
                oprint(eg["question"])
                oprint("-"*100)
                pass
            match = qp == qg
            if not match and leeway >= 1:
                leeway -= 1
                match = 1
            grades.append(correct)
            exact_match.append(match)
            error_loger.log(eg, ep, all_meta[eg["table_id"]]["header"])
        print(json.dumps({
            'ex_accuracy': sum(grades) / len(grades),
            'lf_accuracy': sum(exact_match) / len(exact_match),
            }, indent=2))

        print(c)
        print(agg_map)
        print(wrong_indexes)
        error_loger.display()
        error_loger.dump('./errors/' + (key_data+"_"+key_results+"").replace("/", '')+'.log')
        print(cc)
        print("selwhere", selwhere)
        out_file_new.close()
        forig.close()
'''
4413
sel :  0.09358712893723091
agg :  0.003399048266485384
col :  0.09494674824382507
op :  0.0018128257421255382
val :  0.058237026965782916
sub_val :  0.024019941083163382
rep_val :  0.03081803761613415
'''

'''
[]
['ensenada, baja california , mexico']
['Wrestler', 'Reign', 'Days held', 'Location', 'Event']
{'agg': 0, 'sel': 3, 'conds': [[1, 0, '2'], [3, 0, 'super parka']]}
{'sel': 3, 'conds': [[0, 0, 'super parka'], [1, 0, '2']], 'agg': 0}
2-14227676-2
Location super parka Wrestler 2 Reign

'''

'''
8419
sel :  0.03563368571089203
agg :  0.09229124599121036
col :  0.06069604466088609
op :  0.016629053331749615
val :  0.0660410975175199
sub_val :  0.02470602209288514
rep_val :  0.029813517044779664
'''


'''
base wrong - {}
noise wrong - {}
'''

'''
simple 400

dev results ------------
 Epoch: 14, ave loss: 0.5565033228247586, acc_sc: 0.935, acc_sa: 0.930, acc_wn: 0.990,         acc_wc: 0.943, acc_wo: 0.990, acc_wvi: 0.964, acc_wv: 0.964, acc_lx: 0.808, acc_x: 0.808
 Best Dev lx acc: 0.8082901554404145 at epoch: 0


 Epoch: 0, ave loss: 0.9201247109187082, acc_sc: 0.876, acc_sa: 0.940, acc_wn: 0.992,         acc_wc: 0.782, acc_wo: 0.992, acc_wvi: 0.927, acc_wv: 0.927, acc_lx: 0.687, acc_x: 0.687

 Epoch: 0, ave loss: 0.6700773765405379, acc_sc: 0.951, acc_sa: 0.930, acc_wn: 0.995,         acc_wc: 0.972, acc_wo: 0.992, acc_wvi: 0.992, acc_wv: 0.992, acc_lx: 0.870, acc_x: 0.870

'''

'''
simple 550

dev results ------------
 Epoch: 0, ave loss: 0.7487502048625833, acc_sc: 0.931, acc_sa: 0.930, acc_wn: 0.994,         acc_wc: 0.971, acc_wo: 0.992, acc_wvi: 0.987, acc_wv: 0.987, acc_lx: 0.853, acc_x: 0.853

dev results ------------
 Epoch: 0, ave loss: 1.0219390451908112, acc_sc: 0.863, acc_sa: 0.931, acc_wn: 0.983,         acc_wc: 0.785, acc_wo: 0.981, acc_wvi: 0.920, acc_wv: 0.920, acc_lx: 0.670, acc_x: 0.670

dev results ------------
 Epoch: 0, ave loss: 0.6806088620566186, acc_sc: 0.924, acc_sa: 0.926, acc_wn: 0.987,         acc_wc: 0.941, acc_wo: 0.985, acc_wvi: 0.962, acc_wv: 0.962, acc_lx: 0.800, acc_x: 0.800


'''